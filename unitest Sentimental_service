```python
import unittest
from unittest.mock import AsyncMock, patch
from sentiment_service import TwitterSource, RedditSource, NewsSource, SentimentAnalyzer

class TestSentimentService(unittest.TestCase):

    @patch('sentiment_service.tweepy.API')
    def test_twitter_source(self, MockTwitterAPI):
        # Mocking Twitter API
        mock_api = MockTwitterAPI.return_value
        mock_api.search.return_value = [AsyncMock(full_text="Positive tweet about Bitcoin")]

        twitter_source = TwitterSource(mock_api, enabled=True)
        data = asyncio.run(twitter_source.fetch_data("Bitcoin"))
        self.assertEqual(len(data), 1)
        self.assertIn("Positive tweet about Bitcoin", data)

    @patch('sentiment_service.praw.Reddit')
    def test_reddit_source(self, MockReddit):
        # Mocking Reddit API
        mock_reddit = MockReddit.return_value
        mock_comments = [AsyncMock(body="Positive Reddit comment about Bitcoin")]
        mock_subreddit = AsyncMock()
        mock_subreddit.comments.return_value = mock_comments
        mock_reddit.subreddit.return_value = mock_subreddit

        reddit_source = RedditSource(mock_reddit, enabled=True)
        data = asyncio.run(reddit_source.fetch_data("Bitcoin"))
        self.assertEqual(len(data), 1)
        self.assertIn("Positive Reddit comment about Bitcoin", data)

    @patch('sentiment_service.aiohttp.ClientSession')
    def test_news_source(self, MockClientSession):
        # Mocking News API
        mock_session = MockClientSession.return_value
        mock_get = mock_session.get.return_value.__aenter__.return_value
        mock_get.status = 200
        mock_get.json.return_value = {
            'articles': [{'title': 'Positive news about Bitcoin', 'description': 'Bitcoin is rising'}]
        }

        news_source = NewsSource("fake_api_key", enabled=True)
        data = asyncio.run(news_source.fetch_data("Bitcoin"))
        self.assertEqual(len(data), 1)
        self.assertIn("Positive news about Bitcoin Bitcoin is rising", data)

    def test_sentiment_analyzer(self):
        sources = [
            TwitterSource(None, enabled=False),
            RedditSource(None, enabled=False),
            NewsSource(None, enabled=False)
        ]
        analyzer = SentimentAnalyzer(sources)
        sentiments = [0.1, -0.2, 0.3, -0.1]
        confidence = analyzer.calculate_confidence(sentiments)
        self.assertAlmostEqual(confidence, 0.0, places=2)

if __name__ == '__main__':
    unittest.main()
```